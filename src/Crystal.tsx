/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Suspense, useRef, useState } from 'react'
import { PositionalAudio, useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useSpring, animated } from '@react-spring/three';
import { Mesh } from 'three';

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/crystal.glb') as any
  const mesh = useRef<Mesh>(null!);
  const [hovered, setHovered] = useState<boolean>(false);
  const [play, setPlay] = useState<boolean>(false);
  const { scale } = useSpring({ scale: hovered ? 1.8 : 1.5 });
  useFrame(({clock}) => {
    if (!mesh.current) return;
    mesh.current.rotation.y = -clock.getElapsedTime() / 10;
  })

  const onIn = () => {
    setHovered(true);
  }

  const onOut = () => {
    setHovered(false);
  }

  const onClick = () => {
    setHovered(h => !h);
    setPlay(true);
  }

  return (
    <group receiveShadow castShadow {...props} dispose={null}>
      <animated.mesh
        onClick={onClick}
        onPointerOver={onIn}
        onPointerOut={onOut}
        scale={scale}
        ref={mesh}
        receiveShadow
        castShadow
        geometry={nodes.Quad_Sphere.geometry}
        material={materials.Material}>
          <meshPhysicalMaterial />
          <Suspense>
            {play && <PositionalAudio autoplay url="/nomana.mp3" distance={1} />}
          </Suspense>
      </animated.mesh>

    </group>
  )
}

useGLTF.preload('/crystal.glb')
